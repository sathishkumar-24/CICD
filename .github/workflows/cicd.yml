name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    tags:
      - "v*.*.*" # Match tags like v1.0.0
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
            
      - name: Install AStyle
        run: |
          sudo apt-get update -y
          sudo apt-get install -y astyle
          
      - name: Format Code with AStyle
        run: |
          astyle --options=astylerc.txt "build/*.c"

      - name: Check for Changes after Formatting
        run: |
          git diff --exit-code || { echo "Code formatting changes detected. Please commit the changes."; exit 1; }

      - name: Set up Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
        shell: bash

      - name: Extract Version Number
        id: extract_version
        run: |
          # Check commit message for vX.Y.Z pattern
          COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $COMMIT_MESSAGE =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Extract version number from commit message
            echo $COMMIT_MESSAGE | grep -oP 'v\d+\.\d+\.\d+' | sed 's/v//' > version.txt
          else
            # Try to get the latest tag, fallback to v0.9.9 if no tags found
            PREVIOUS_TAG=$(git describe --abbrev=0 --tags --match "v*" 2>/dev/null || echo "v0.9.9")
            # Extract the version number from the previous tag
            PREVIOUS_VERSION=$(echo $PREVIOUS_TAG | sed 's/v//')
            MAJOR=$(echo $PREVIOUS_VERSION | cut -d'.' -f1)
            echo "MAJOR : $MAJOR"
            MINOR=$(echo $PREVIOUS_VERSION | cut -d'.' -f2)
            echo "MINOR : $MINOR"
            PATCH=$(echo $PREVIOUS_VERSION | cut -d'.' -f3)
            echo "PATCH : $PATCH"

            # Increment patch version and handle overflow
            PATCH=$((PATCH + 1))
            if [ $PATCH -ge 10 ]; then
              PATCH=0
              MINOR=$((MINOR + 1))
              if [ $MINOR -ge 10 ]; then
                MINOR=0
                MAJOR=$((MAJOR + 1))
              fi
            fi

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "v$NEW_VERSION" > version.txt
          fi
          
          cat version.txt
        shell: bash
  
      - name: Bump version and create tag
        if: github.event_name == 'push'
        run: |
          git add version.txt  # Add version.txt to the staging area
          NEW_VERSION=$(cat version.txt)  # Get version from version.txt
          # Commit the version number increment
          git commit -m "[version-bump] Bump version to $NEW_VERSION"
          # Create a new tag with the updated version number
          git tag $NEW_VERSION
          # Push changes and the new tag to the repository 
          git push origin main --tags
        shell: bash

      - name: Build and Test
        run: |
          # Add your build and test commands here
          echo "Building and testing..."
        shell: bash
      - name: Check gh version
        run: gh --version

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
        run: |
          # Extract version from the tag name
          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          echo "New Versions: $VERSION"
          # Create a GitHub release
          gh release create $VERSION --title "Release $VERSION" --notes "Release notes for version $VERSION"
        env:
          GH_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        shell: bash
        
      - name: Debug Output
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "New Version: $VERSION"
        shell: bash

